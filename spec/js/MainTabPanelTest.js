// Generated by CoffeeScript 1.3.3

describe("The Main Tab Panel...", function() {
  var createComponentTestArea, view, viewController;
  view = null;
  viewController = null;
  createComponentTestArea = function() {
    if (Ext.get("componentTestArea") != null) {
      Ext.removeNode(Ext.get("componentTestArea").dom);
    }
    return Ext.DomHelper.append(Ext.getBody(), "<div id='componentTestArea' style='visibility: hidden'></div>");
  };
  beforeEach(function() {
    createComponentTestArea();
    view = Ext.create("app.view.MainTabPanel", {
      renderTo: "componentTestArea"
    });
    return viewController = view.getController();
  });
  afterEach(function() {
    view.destroy();
    view = null;
    return viewController = null;
  });
  return describe("During a successful startup...", function() {
    it("has created the main tab panel view and view controller", function() {
      expect(view).toBeDefined();
      expect(view.rendered).toBeTruthy();
      expect(view instanceof app.view.MainTabPanel).toBeTruthy();
      expect(viewController).toBeDefined();
      expect(viewController instanceof app.controller.MainController).toBeTruthy();
      return expect(viewController.getView() === view).toBeTruthy();
    });
    it("allows panel title to be changed", function() {
      expect(viewController.getPanel2().title).toEqual("Panel 2");
      viewController.updatePanelTitle("My New Title");
      return expect(viewController.getPanel2().title).toEqual("My New Title");
    });
    it("allows store to be filtered", function() {
      var store;
      store = Deft.ioc.Injector.resolve("companyStore");
      waitsFor((function() {
        return store.getCount() > 0;
      }), "Store data never loaded.", 2000);
      return runs(function() {
        expect(store.filters.length).toBe(0);
        store.filterIndustry("Manufacturing");
        expect(store.filters.length).toBe(1);
        store.data.each(function(thisCompany) {
          return expect(thisCompany.get("industry")).toEqual("Manufacturing");
        });
        return store.clearFilter();
      });
    });
    it("should update the current company upon selection", function() {
      var store;
      store = Deft.ioc.Injector.resolve("companyStore");
      waitsFor((function() {
        return store.getCount() > 0;
      }), "Store data never loaded.", 2000);
      return runs(function() {
        var firstCompany, grid;
        grid = viewController.getCompanyGridPanel();
        spyOn(viewController, 'setCurrentCompany');
        firstCompany = grid.store.getAt(0);
        grid.fireEvent("selectionchange", {}, [firstCompany]);
        return expect(viewController.setCurrentCompany).toHaveBeenCalled();
      });
    });
    it("should pass the selected company when setting the current company", function() {
      var store;
      store = Deft.ioc.Injector.resolve("companyStore");
      waitsFor((function() {
        return store.getCount() > 0;
      }), "Store data never loaded.", 2000);
      return runs(function() {
        var firstCompany, grid;
        grid = viewController.getCompanyGridPanel();
        spyOn(viewController, 'setCurrentCompany');
        firstCompany = grid.store.getAt(0);
        grid.fireEvent("selectionchange", {}, [firstCompany], 0);
        return expect(viewController.setCurrentCompany).toHaveBeenCalledWith(firstCompany);
      });
    });
    it("should store the selected company as the current company", function() {
      var store;
      store = Deft.ioc.Injector.resolve("companyStore");
      waitsFor((function() {
        return store.getCount() > 0;
      }), "Store data never loaded.", 2000);
      return runs(function() {
        var firstCompany, grid;
        grid = viewController.getCompanyGridPanel();
        spyOn(viewController, 'setCurrentCompany').andCallThrough();
        firstCompany = grid.store.getAt(0);
        grid.fireEvent("selectionchange", {}, [firstCompany], 0);
        return expect(viewController.getCurrentCompany()).toBe(firstCompany);
      });
    });
    it("should allow getting the current company to be faked", function() {
      var grid;
      grid = viewController.getCompanyGridPanel();
      spyOn(viewController, 'getCurrentCompany').andCallFake(function() {
        return "Fake Company";
      });
      return expect(viewController.getCurrentCompany()).toBe("Fake Company");
    });
    return it("should allow setting the current company to be intercepted and altered", function() {
      var store;
      store = Deft.ioc.Injector.resolve("companyStore");
      waitsFor((function() {
        return store.getCount() > 0;
      }), "Store data never loaded.", 2000);
      return runs(function() {
        var changedPrice, firstCompany, grid;
        grid = viewController.getCompanyGridPanel();
        changedPrice = 12345.67;
        spyOn(viewController, 'setCurrentCompany').andCallFake(function(company) {
          var originalFunction;
          originalFunction = this.setCurrentCompany.originalValue;
          company.set("price", changedPrice);
          return originalFunction.call(this, company);
        });
        firstCompany = grid.store.getAt(0);
        grid.fireEvent("selectionchange", {}, [firstCompany], 0);
        return expect(viewController.getCurrentCompany().get("price")).toBe(changedPrice);
      });
    });
  });
});
